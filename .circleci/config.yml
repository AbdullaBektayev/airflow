version: 2

jobs:

  test:
    working_directory: ~/project
    docker:
      - image: cimg/python:3.10.5
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS
        environment:
          DJANGO_SECRET_KEY: stub
          SRC_USE_SENTRY: off
          DEBUG: off
          DATABASE_URL: postgresql://postgres:test_db_password@localhost/src_test_db
          SRC_EMAIL_BACKEND: django.core.mail.backends.dummy.EmailBackend
          SRC_CELERY_BROKER: redis://localhost:6379/1
          SRC_CELERY_TASK_ALWAYS_EAGER: on
      - image: postgres:14.1
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS
        environment:
          POSTGRES_DB: src_test_db
          POSTGRES_PASSWORD: test_db_password
      - image: redis:6.2.6
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASS
    steps:
      - checkout
      - restore_cache:
          key: python-deps-v1-{{ checksum "requirements-dev.txt" }}
      - run:
          name: Install Python dependencies
          command: |
            python3 -m venv .pyenv
            . .pyenv/bin/activate
            pip install -U pip
            pip install -r requirements-dev.txt
      - save_cache:
          key: python-deps-v1-{{ checksum "requirements-dev.txt" }}
          paths:
            - ".pyenv"
      - run:
          name: Check `black`
          command: . .pyenv/bin/activate && black --check ./src
      - run:
          name: Check `isort`
          command: . .pyenv/bin/activate && isort --check --skip .pyenv ./src
      - run:
          name: Check `pylama`
          command: . .pyenv/bin/activate && pylama -o pylama.ini ./src
      - run:
          name: Check `bandit`
          command: . .pyenv/bin/activate && bandit -r --skip=B101 ./src
      - run:
          name: Check `safety`
          command: . .pyenv/bin/activate && safety check -r requirements.txt
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - run:
          name: Wait for Postgres
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
#         TODO uncomment this line of code when import_export_celery add a migration file
#      - run:
#          name: Check for uncreated migrations
#          command: |
#            . .pyenv/bin/activate
#            python3 manage.py makemigrations --check --dry-run
      - run:
          name: Run tests
          command: |
            . .pyenv/bin/activate
            python3 manage.py collectstatic --no-input
            pytest --cache-clear --capture=no --showlocals --verbose --cov=src --cov-report term-missing --cov-fail-under=100 --no-migrations --junitxml ./test-results/test-results.xml
      - store_test_results:
          path: ~/project/api/test-results

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - test
